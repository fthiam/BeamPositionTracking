//=============================================================================
//
// file :        ActuatorSystem.h
//
// description : Include for the ActuatorSystem class.
//
// project :	ActuatorSystem
//
// $Author:  Thiam F.
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _ACTUATORSYSTEM_H
#define _ACTUATORSYSTEM_H

#include <yat4tango/DynamicAttributeManager.h>
#include <yat4tango/DeviceInfo.h>
#include <yat4tango/InnerAppender.h>
#include <yat/Version.h>
#include "ASTaskManager.h"
#include <tango.h>
#include <yat4tango/PropertyHelper.h>

#include "PogoHelper.h"

//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------


namespace ActuatorSystem_ns
{

/**
 * Class Description:
 * This device should be used for BeamPositionTracking application only. This device's aim is to organize motors movements on two axes ( X and Y ) 
 *	in order to move beam centroid position.
 */

/*
 *	Device States Description:
*  Tango::ON :       ActuatorSystem is now ready to operate with  BeamPositionTracking, both X and Y axes are calibrated and in a good state to go.
*  Tango::MOVING :   At least one axis is moving
*  Tango::FAULT :    An error occured, report to status...
*  Tango::INIT :     Initialisation currently running
*  Tango::STANDBY :  Device not ready to operate yet, report to status...
*  Tango::ALARM :    At least one axis is out of bounds
 */


class ActuatorSystem: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevDouble	*attr_xPosition_read;
		Tango::DevDouble	attr_xPosition_write;
		Tango::DevDouble	*attr_yPosition_read;
		Tango::DevDouble	attr_yPosition_write;
		Tango::DevState	*attr_xState_read;
		Tango::DevState	*attr_yState_read;
		Tango::DevBoolean	*attr_isXLinear_read;
		Tango::DevBoolean	attr_isXLinear_write;
		Tango::DevBoolean	*attr_isYLinear_read;
		Tango::DevBoolean	attr_isYLinear_write;
		Tango::DevBoolean	*attr_isXCalibrated_read;
		Tango::DevBoolean	attr_isXCalibrated_write;
		Tango::DevBoolean	*attr_isYCalibrated_read;
		Tango::DevBoolean	attr_isYCalibrated_write;
		Tango::DevDouble	*attr_xLinearRatio_read;
		Tango::DevDouble	attr_xLinearRatio_write;
		Tango::DevDouble	*attr_yLinearRatio_read;
		Tango::DevDouble	attr_yLinearRatio_write;
		Tango::DevBoolean	*attr_isSystemReady_read;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	Path to the X Axis plugin library
 */
	string	xAxisPluginPath;
/**
 *	X Axis plugin type
 */
	string	xAxisPluginType;
/**
 *	Y Axis plugin type
 */
	string	yAxisPluginType;
/**
 *	Path to the Y Axis plugin library
 */
	string	yAxisPluginPath;
/**
 *	X Axis Tango device adress
 */
	string	xAxisDeviceAdress;
/**
 *	Y Axis Tango device adress
 */
	string	yAxisDeviceAdress;
/**
 *	Set maximum position of X axis, in axis position's unit...
 */
	Tango::DevDouble	xAxisMaxPosition;
/**
 *	Set minimum position of X axis, in axis position's unit...
 */
	Tango::DevDouble	xAxisMinPosition;
/**
 *	Set maximum position of Y axis, in axis position's unit...
 */
	Tango::DevDouble	yAxisMaxPosition;
/**
 *	Set minimum position of Y axis, in axis position's unit...
 */
	Tango::DevDouble	yAxisMinPosition;
/**
 *	Either NORMAL or SIMULATED;
 *	In simulated mode, this device will only read state/status and positions from axes, it will not send any new positions....
 */
	string	deviceMode;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	ActuatorSystem(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	ActuatorSystem(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	ActuatorSystem(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~ActuatorSystem() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name ActuatorSystem methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for xPosition acquisition result.
 */
	virtual void read_xPosition(Tango::Attribute &attr);
/**
 *	Write xPosition attribute values to hardware.
 */
	virtual void write_xPosition(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for yPosition acquisition result.
 */
	virtual void read_yPosition(Tango::Attribute &attr);
/**
 *	Write yPosition attribute values to hardware.
 */
	virtual void write_yPosition(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for xState acquisition result.
 */
	virtual void read_xState(Tango::Attribute &attr);
/**
 *	Extract real attribute values for yState acquisition result.
 */
	virtual void read_yState(Tango::Attribute &attr);
/**
 *	Extract real attribute values for isXLinear acquisition result.
 */
	virtual void read_isXLinear(Tango::Attribute &attr);
/**
 *	Write isXLinear attribute values to hardware.
 */
	virtual void write_isXLinear(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for isYLinear acquisition result.
 */
	virtual void read_isYLinear(Tango::Attribute &attr);
/**
 *	Write isYLinear attribute values to hardware.
 */
	virtual void write_isYLinear(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for isXCalibrated acquisition result.
 */
	virtual void read_isXCalibrated(Tango::Attribute &attr);
/**
 *	Write isXCalibrated attribute values to hardware.
 */
	virtual void write_isXCalibrated(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for isYCalibrated acquisition result.
 */
	virtual void read_isYCalibrated(Tango::Attribute &attr);
/**
 *	Write isYCalibrated attribute values to hardware.
 */
	virtual void write_isYCalibrated(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for xLinearRatio acquisition result.
 */
	virtual void read_xLinearRatio(Tango::Attribute &attr);
/**
 *	Write xLinearRatio attribute values to hardware.
 */
	virtual void write_xLinearRatio(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for yLinearRatio acquisition result.
 */
	virtual void read_yLinearRatio(Tango::Attribute &attr);
/**
 *	Write yLinearRatio attribute values to hardware.
 */
	virtual void write_yLinearRatio(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for isSystemReady acquisition result.
 */
	virtual void read_isSystemReady(Tango::Attribute &attr);
/**
 *	Read/Write allowed for xPosition attribute.
 */
	virtual bool is_xPosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for yPosition attribute.
 */
	virtual bool is_yPosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for xState attribute.
 */
	virtual bool is_xState_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for yState attribute.
 */
	virtual bool is_yState_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for isXLinear attribute.
 */
	virtual bool is_isXLinear_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for isYLinear attribute.
 */
	virtual bool is_isYLinear_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for isXCalibrated attribute.
 */
	virtual bool is_isXCalibrated_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for isYCalibrated attribute.
 */
	virtual bool is_isYCalibrated_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for xLinearRatio attribute.
 */
	virtual bool is_xLinearRatio_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for yLinearRatio attribute.
 */
	virtual bool is_yLinearRatio_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for isSystemReady attribute.
 */
	virtual bool is_isSystemReady_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for StopAxes command.
 */
	virtual bool is_StopAxes_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for MoveXAxisRelative command.
 */
	virtual bool is_MoveXAxisRelative_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for MoveYAxisRelative command.
 */
	virtual bool is_MoveYAxisRelative_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for ApplyRelativeMovementOnAxes command.
 */
	virtual bool is_ApplyRelativeMovementOnAxes_allowed(const CORBA::Any &any);
/**
 * Will stop movement on both axes
 *	@exception DevFailed
 */
	void	stop_axes();
/**
 * To move X axis with a relative movement
 *	@param	argin	
 *	@exception DevFailed
 */
	void	move_xaxis_relative(Tango::DevDouble);
/**
 * To move Y axis with a relative movement 
 *	@param	argin	
 *	@exception DevFailed
 */
	void	move_yaxis_relative(Tango::DevDouble);
/**
 * Argin[0] = movementOnXAxis; 
 *	Argin[1] = movementOnYAxis
 *	@param	argin	
 *	@exception DevFailed
 */
	void	apply_relative_movement_on_axes(const Tango::DevVarDoubleArray *);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------

public : 

	yat4tango::DynamicAttributeManager* _dynAttrManager;
  

private :  
	std::string check_properties();
	ASTaskManager::ASTaskManager* _taskManager;

	bool _initDone;

	double _xPosition;
	double _yPosition;
	Tango::DevState _xAxisState;
	Tango::DevState _yAxisState;

};

}	// namespace_ns

#endif	// _ACTUATORSYSTEM_H
