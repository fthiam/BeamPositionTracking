//=============================================================================
//
// file :         ActuatorSystemClass.h
//
// description :  Include for the ActuatorSystemClass root class.
//                This class is the singleton class for
//                the ActuatorSystem device class.
//                It contains all properties and methods which the 
//                ActuatorSystem requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _ACTUATORSYSTEMCLASS_H
#define _ACTUATORSYSTEMCLASS_H

#include <tango.h>
#include <ActuatorSystem.h>


namespace ActuatorSystem_ns
{//=====================================
//	Define classes for attributes
//=====================================
class isSystemReadyAttrib: public Tango::Attr
{
public:
	isSystemReadyAttrib():Attr("isSystemReady", Tango::DEV_BOOLEAN, Tango::READ) {};
	~isSystemReadyAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_isSystemReady(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_isSystemReady_allowed(ty);}
};

class yLinearRatioAttrib: public Tango::Attr
{
public:
	yLinearRatioAttrib():Attr("yLinearRatio", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~yLinearRatioAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_yLinearRatio(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_yLinearRatio(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_yLinearRatio_allowed(ty);}
};

class xLinearRatioAttrib: public Tango::Attr
{
public:
	xLinearRatioAttrib():Attr("xLinearRatio", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~xLinearRatioAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_xLinearRatio(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_xLinearRatio(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_xLinearRatio_allowed(ty);}
};

class isYCalibratedAttrib: public Tango::Attr
{
public:
	isYCalibratedAttrib():Attr("isYCalibrated", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~isYCalibratedAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_isYCalibrated(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_isYCalibrated(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_isYCalibrated_allowed(ty);}
};

class isXCalibratedAttrib: public Tango::Attr
{
public:
	isXCalibratedAttrib():Attr("isXCalibrated", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~isXCalibratedAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_isXCalibrated(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_isXCalibrated(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_isXCalibrated_allowed(ty);}
};

class isYLinearAttrib: public Tango::Attr
{
public:
	isYLinearAttrib():Attr("isYLinear", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~isYLinearAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_isYLinear(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_isYLinear(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_isYLinear_allowed(ty);}
};

class isXLinearAttrib: public Tango::Attr
{
public:
	isXLinearAttrib():Attr("isXLinear", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~isXLinearAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_isXLinear(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_isXLinear(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_isXLinear_allowed(ty);}
};

class yStateAttrib: public Tango::Attr
{
public:
	yStateAttrib():Attr("yState", Tango::DEV_STATE, Tango::READ) {};
	~yStateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_yState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_yState_allowed(ty);}
};

class xStateAttrib: public Tango::Attr
{
public:
	xStateAttrib():Attr("xState", Tango::DEV_STATE, Tango::READ) {};
	~xStateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_xState(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_xState_allowed(ty);}
};

class yPositionAttrib: public Tango::Attr
{
public:
	yPositionAttrib():Attr("yPosition", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~yPositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_yPosition(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_yPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_yPosition_allowed(ty);}
};

class xPositionAttrib: public Tango::Attr
{
public:
	xPositionAttrib():Attr("xPosition", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~xPositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<ActuatorSystem *>(dev))->read_xPosition(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<ActuatorSystem *>(dev))->write_xPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<ActuatorSystem *>(dev))->is_xPosition_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class ApplyRelativeMovementOnAxesCmd : public Tango::Command
{
public:
	ApplyRelativeMovementOnAxesCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ApplyRelativeMovementOnAxesCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ApplyRelativeMovementOnAxesCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ActuatorSystem *>(dev))->is_ApplyRelativeMovementOnAxes_allowed(any);}
};



class MoveYAxisRelativeCmd : public Tango::Command
{
public:
	MoveYAxisRelativeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MoveYAxisRelativeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MoveYAxisRelativeCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ActuatorSystem *>(dev))->is_MoveYAxisRelative_allowed(any);}
};



class MoveXAxisRelativeCmd : public Tango::Command
{
public:
	MoveXAxisRelativeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	MoveXAxisRelativeCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~MoveXAxisRelativeCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ActuatorSystem *>(dev))->is_MoveXAxisRelative_allowed(any);}
};



class StopAxesClass : public Tango::Command
{
public:
	StopAxesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopAxesClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopAxesClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<ActuatorSystem *>(dev))->is_StopAxes_allowed(any);}
};



//
// The ActuatorSystemClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	ActuatorSystemClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static ActuatorSystemClass *init(const char *);
	static ActuatorSystemClass *instance();
	~ActuatorSystemClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	ActuatorSystemClass(string &);
	static ActuatorSystemClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace ActuatorSystem_ns

#endif // _ACTUATORSYSTEMCLASS_H
