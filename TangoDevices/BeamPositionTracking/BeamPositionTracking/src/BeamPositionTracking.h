//=============================================================================
//
// file :        BeamPositionTracking.h
//
// description : Include for the BeamPositionTracking class.
//
// project :	BeamPositionTracking
//
// $Author:  Thiam F.
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _BEAMPOSITIONTRACKING_H
#define _BEAMPOSITIONTRACKING_H

#include <yat4tango/DynamicAttributeManager.h>
#include <yat4tango/DeviceInfo.h>
#include <yat4tango/InnerAppender.h>
#include <yat/Version.h>
#include <BPTTaskManager.h>
#include <tango.h>
#include <yat4tango/PropertyHelper.h>
#include "BPTDefinitions.h"


//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------


namespace BeamPositionTracking_ns
{

/**
 * Class Description:
 * BeamPositionTracking is a device that will be used on beamlines to enslave the beam position on a specific target. In order to move the beam centroid,
 *	BeamPositionTracking device will need to work with ActuatorSystem (please refer to AS documentation).
 *	Asservissement loop is based on a PID algorithm (on per axis).
 *	It will be able to work with differents types of axes devices, and several detectors such as Lima detector and XBPM using Yat4Tango::Plugin technology.
 */

/*
 *	Device States Description:
*  Tango::INIT :     Initialization curently running
*  Tango::RUNNING :  Beam tracking is running
*  Tango::FAULT :    An error occured, report to status...
*  Tango::STANDBY :  System not ready to operate, report to status...
*  Tango::DISABLE :  Calibration is running
*  Tango::ON :       System ready to operate
 */


class BeamPositionTracking: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevDouble	*attr_computedTime_read;
		Tango::DevShort	*attr_xAxisTarget_read;
		Tango::DevShort	attr_xAxisTarget_write;
		Tango::DevShort	*attr_yAxisTarget_read;
		Tango::DevShort	attr_yAxisTarget_write;
		Tango::DevShort	*attr_xAxisCurrentBeamPosition_read;
		Tango::DevShort	*attr_yAxisCurrentBeamPosition_read;
		Tango::DevDouble	*attr_warningZoneXCenter_read;
		Tango::DevDouble	attr_warningZoneXCenter_write;
		Tango::DevDouble	*attr_warningZoneYCenter_read;
		Tango::DevDouble	attr_warningZoneYCenter_write;
		Tango::DevDouble	*attr_warningZoneRadius_read;
		Tango::DevDouble	attr_warningZoneRadius_write;
		Tango::DevUShort	*attr_xAxisRegulationThreshold_read;
		Tango::DevUShort	attr_xAxisRegulationThreshold_write;
		Tango::DevUShort	*attr_yAxisRegulationThreshold_read;
		Tango::DevUShort	attr_yAxisRegulationThreshold_write;
		Tango::DevBoolean	*attr_fixedMode_read;
		Tango::DevUChar	*attr_thresholdedImage_read;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	Period of the Device task
 */
	Tango::DevUShort	deviceTaskPeriod;
/**
 *	Number of centroid values to acquire in the asservissment loop
 */
	Tango::DevShort	nbImgToAlign;
/**
 *	Sensor plugin type to use
 */
	string	sensorPluginType;
/**
 *	ActuatorSystemDevice adress
 */
	string	actuatorSystemDeviceAdress;
/**
 *	Plugin library path
 */
	string	pluginPath;
/**
 *	Number of steps to calibrate X Axis. Only works if X is set as a linear axis on ActuatorSystemDevice.
 */
	Tango::DevShort	calibrationStepNbXAxis;
/**
 *	Number of steps to calibrate Y Axis. Only works if Y is set as a linear axis on ActuatorSystemDevice.
 */
	Tango::DevShort	calibrationStepNbYAxis;
/**
 *	is Pid in use, P coefficient, I , D :
 *	IE : True, 1, 2, 3
 */
	string	xPIDDefinition;
/**
 *	is Pid in use, P coefficient, I , D :
 *	IE : True, 1, 2, 3
 */
	string	yPIDDefinition;
/**
 *	Either : NORMAL, SIMULATED
 */
	string	deviceMode;
/**
 *	Used as x axis target when FixMode = true
 */
	Tango::DevShort	fixedXTarget;
/**
 *	Used as y axis target when FixMode = true
 */
	Tango::DevShort	fixedYTarget;
/**
 *	If true, then Target and warning zone will be define in properties. User will not be able to change those values in runtime using attributes...
 */
	Tango::DevBoolean	fixedMode;
/**
 *	Used as x warning zone center when FixMode = true
 */
	Tango::DevShort	fixedXWarningZoneCenter;
/**
 *	Used as y warning zone center when FixMode = true
 */
	Tango::DevShort	fixedYWarningZoneCenter;
/**
 *	Used as warning zone radius when FixMode = true
 */
	Tango::DevShort	fixedWarningZoneRadius;
/**
 *	Set alias for X and Y axes here :
 *	x, y
 */
	vector<string>	axesAliases;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	BeamPositionTracking(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	BeamPositionTracking(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	BeamPositionTracking(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~BeamPositionTracking() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name BeamPositionTracking methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for computedTime acquisition result.
 */
	virtual void read_computedTime(Tango::Attribute &attr);
/**
 *	Extract real attribute values for xAxisTarget acquisition result.
 */
	virtual void read_xAxisTarget(Tango::Attribute &attr);
/**
 *	Write xAxisTarget attribute values to hardware.
 */
	virtual void write_xAxisTarget(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for yAxisTarget acquisition result.
 */
	virtual void read_yAxisTarget(Tango::Attribute &attr);
/**
 *	Write yAxisTarget attribute values to hardware.
 */
	virtual void write_yAxisTarget(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for xAxisCurrentBeamPosition acquisition result.
 */
	virtual void read_xAxisCurrentBeamPosition(Tango::Attribute &attr);
/**
 *	Extract real attribute values for yAxisCurrentBeamPosition acquisition result.
 */
	virtual void read_yAxisCurrentBeamPosition(Tango::Attribute &attr);
/**
 *	Extract real attribute values for warningZoneXCenter acquisition result.
 */
	virtual void read_warningZoneXCenter(Tango::Attribute &attr);
/**
 *	Write warningZoneXCenter attribute values to hardware.
 */
	virtual void write_warningZoneXCenter(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for warningZoneYCenter acquisition result.
 */
	virtual void read_warningZoneYCenter(Tango::Attribute &attr);
/**
 *	Write warningZoneYCenter attribute values to hardware.
 */
	virtual void write_warningZoneYCenter(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for warningZoneRadius acquisition result.
 */
	virtual void read_warningZoneRadius(Tango::Attribute &attr);
/**
 *	Write warningZoneRadius attribute values to hardware.
 */
	virtual void write_warningZoneRadius(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for xAxisRegulationThreshold acquisition result.
 */
	virtual void read_xAxisRegulationThreshold(Tango::Attribute &attr);
/**
 *	Write xAxisRegulationThreshold attribute values to hardware.
 */
	virtual void write_xAxisRegulationThreshold(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for yAxisRegulationThreshold acquisition result.
 */
	virtual void read_yAxisRegulationThreshold(Tango::Attribute &attr);
/**
 *	Write yAxisRegulationThreshold attribute values to hardware.
 */
	virtual void write_yAxisRegulationThreshold(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for fixedMode acquisition result.
 */
	virtual void read_fixedMode(Tango::Attribute &attr);
/**
 *	Extract real attribute values for thresholdedImage acquisition result.
 */
	virtual void read_thresholdedImage(Tango::Attribute &attr);
/**
 *	Read/Write allowed for computedTime attribute.
 */
	virtual bool is_computedTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for xAxisTarget attribute.
 */
	virtual bool is_xAxisTarget_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for yAxisTarget attribute.
 */
	virtual bool is_yAxisTarget_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for xAxisCurrentBeamPosition attribute.
 */
	virtual bool is_xAxisCurrentBeamPosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for yAxisCurrentBeamPosition attribute.
 */
	virtual bool is_yAxisCurrentBeamPosition_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for warningZoneXCenter attribute.
 */
	virtual bool is_warningZoneXCenter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for warningZoneYCenter attribute.
 */
	virtual bool is_warningZoneYCenter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for warningZoneRadius attribute.
 */
	virtual bool is_warningZoneRadius_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for xAxisRegulationThreshold attribute.
 */
	virtual bool is_xAxisRegulationThreshold_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for yAxisRegulationThreshold attribute.
 */
	virtual bool is_yAxisRegulationThreshold_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for fixedMode attribute.
 */
	virtual bool is_fixedMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for thresholdedImage attribute.
 */
	virtual bool is_thresholdedImage_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for ActuatorSystemCalibration command.
 */
	virtual bool is_ActuatorSystemCalibration_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for StartBeamTracking command.
 */
	virtual bool is_StartBeamTracking_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for StopBeamTracking command.
 */
	virtual bool is_StopBeamTracking_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for AcknowlegeStep command.
 */
	virtual bool is_AcknowlegeStep_allowed(const CORBA::Any &any);
/**
 * Will estimate new ratio on X and Y axes (only if axes are in a linear mode).
 *	To do so, it will record current beam centroid, move each axes with CalibrationStepNbX/YAxis value (set in properties) and record new centroid...
 *	This feature will then write linear new ratios on actuator system device. 
 *	@exception DevFailed
 */
	void	actuator_system_calibration();
/**
 * Will start beam tracking on target
 *	@exception DevFailed
 */
	void	start_beam_tracking();
/**
 * Will stop beam tracking
 *	@exception DevFailed
 */
	void	stop_beam_tracking();
/**
 * Use in simulated mode only when tracking is running, to go to the next step
 *	@exception DevFailed
 */
	void	acknowlege_step();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------


public : 

	yat4tango::DynamicAttributeManager* m_dynAttrManager;
  
  
private :

	BPTTaskManager::PIDCoefficient extractPIDCoeffients(std::string property) throw (std::invalid_argument);

	bool initFixedModeValues();

	void setNewLabels(std::string xAlias, std::string yAlias);

	void updateAttrLabel(std::string attrName, std::string label);

	BPTTaskManager::BPTTaskManager* m_taskManager;

	BPTTaskManager::WarningZone m_warningZone;

	BPTTaskManager::Target m_target;

	short m_xBeamPositionInPixels;

	short m_yBeamPositionInPixels;

	ushort m_xAxisRegulationThreshold;

	ushort m_yAxisRegulationThreshold;

	double m_computedTime;

	bool m_initDone;

	std::vector<unsigned char> m_thresholdedImage;

	int m_imageHigh;

	int m_imageWidth;

	std::string m_xAxisAlias;

	std::string m_yAxisAlias;

	BPTTaskManager::FixedModeDefinition m_fixedModeDef;
};

}	// namespace_ns

#endif	// _BEAMPOSITIONTRACKING_H
