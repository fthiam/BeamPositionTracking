//=============================================================================
//
// file :         BeamPositionTrackingClass.h
//
// description :  Include for the BeamPositionTrackingClass root class.
//                This class is the singleton class for
//                the BeamPositionTracking device class.
//                It contains all properties and methods which the 
//                BeamPositionTracking requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _BEAMPOSITIONTRACKINGCLASS_H
#define _BEAMPOSITIONTRACKINGCLASS_H

#include <tango.h>
#include <BeamPositionTracking.h>


namespace BeamPositionTracking_ns
{//=====================================
//	Define classes for attributes
//=====================================
class thresholdedImageAttrib: public Tango::ImageAttr
{
public:
	thresholdedImageAttrib():ImageAttr("thresholdedImage", Tango::DEV_UCHAR, Tango::READ, 2048, 2048) {};
	~thresholdedImageAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_thresholdedImage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_thresholdedImage_allowed(ty);}
};

class fixedModeAttrib: public Tango::Attr
{
public:
	fixedModeAttrib():Attr("fixedMode", Tango::DEV_BOOLEAN, Tango::READ) {};
	~fixedModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_fixedMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_fixedMode_allowed(ty);}
};

class yAxisRegulationThresholdAttrib: public Tango::Attr
{
public:
	yAxisRegulationThresholdAttrib():Attr("yAxisRegulationThreshold", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~yAxisRegulationThresholdAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_yAxisRegulationThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->write_yAxisRegulationThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_yAxisRegulationThreshold_allowed(ty);}
};

class xAxisRegulationThresholdAttrib: public Tango::Attr
{
public:
	xAxisRegulationThresholdAttrib():Attr("xAxisRegulationThreshold", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~xAxisRegulationThresholdAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_xAxisRegulationThreshold(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->write_xAxisRegulationThreshold(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_xAxisRegulationThreshold_allowed(ty);}
};

class warningZoneRadiusAttrib: public Tango::Attr
{
public:
	warningZoneRadiusAttrib():Attr("warningZoneRadius", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~warningZoneRadiusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_warningZoneRadius(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->write_warningZoneRadius(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_warningZoneRadius_allowed(ty);}
};

class warningZoneYCenterAttrib: public Tango::Attr
{
public:
	warningZoneYCenterAttrib():Attr("warningZoneYCenter", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~warningZoneYCenterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_warningZoneYCenter(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->write_warningZoneYCenter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_warningZoneYCenter_allowed(ty);}
};

class warningZoneXCenterAttrib: public Tango::Attr
{
public:
	warningZoneXCenterAttrib():Attr("warningZoneXCenter", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~warningZoneXCenterAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_warningZoneXCenter(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->write_warningZoneXCenter(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_warningZoneXCenter_allowed(ty);}
};

class yAxisCurrentBeamPositionAttrib: public Tango::Attr
{
public:
	yAxisCurrentBeamPositionAttrib():Attr("yAxisCurrentBeamPosition", Tango::DEV_DOUBLE, Tango::READ) {};
	~yAxisCurrentBeamPositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_yAxisCurrentBeamPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_yAxisCurrentBeamPosition_allowed(ty);}
};

class xAxisCurrentBeamPositionAttrib: public Tango::Attr
{
public:
	xAxisCurrentBeamPositionAttrib():Attr("xAxisCurrentBeamPosition", Tango::DEV_DOUBLE, Tango::READ) {};
	~xAxisCurrentBeamPositionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_xAxisCurrentBeamPosition(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_xAxisCurrentBeamPosition_allowed(ty);}
};

class yAxisTargetAttrib: public Tango::Attr
{
public:
	yAxisTargetAttrib():Attr("yAxisTarget", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~yAxisTargetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_yAxisTarget(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->write_yAxisTarget(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_yAxisTarget_allowed(ty);}
};

class xAxisTargetAttrib: public Tango::Attr
{
public:
	xAxisTargetAttrib():Attr("xAxisTarget", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~xAxisTargetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_xAxisTarget(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->write_xAxisTarget(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_xAxisTarget_allowed(ty);}
};

class computedTimeAttrib: public Tango::Attr
{
public:
	computedTimeAttrib():Attr("computedTime", Tango::DEV_DOUBLE, Tango::READ) {};
	~computedTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<BeamPositionTracking *>(dev))->read_computedTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<BeamPositionTracking *>(dev))->is_computedTime_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
class AcknowlegeStepCmd : public Tango::Command
{
public:
	AcknowlegeStepCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AcknowlegeStepCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AcknowlegeStepCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BeamPositionTracking *>(dev))->is_AcknowlegeStep_allowed(any);}
};



class StopBeamTrackingCmd : public Tango::Command
{
public:
	StopBeamTrackingCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StopBeamTrackingCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StopBeamTrackingCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BeamPositionTracking *>(dev))->is_StopBeamTracking_allowed(any);}
};



class StartBeamTrackingCmd : public Tango::Command
{
public:
	StartBeamTrackingCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	StartBeamTrackingCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~StartBeamTrackingCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BeamPositionTracking *>(dev))->is_StartBeamTracking_allowed(any);}
};



class ActuatorSystemCalibrationCmd : public Tango::Command
{
public:
	ActuatorSystemCalibrationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ActuatorSystemCalibrationCmd(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ActuatorSystemCalibrationCmd() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BeamPositionTracking *>(dev))->is_ActuatorSystemCalibration_allowed(any);}
};



//
// The BeamPositionTrackingClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	BeamPositionTrackingClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static BeamPositionTrackingClass *init(const char *);
	static BeamPositionTrackingClass *instance();
	~BeamPositionTrackingClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	BeamPositionTrackingClass(string &);
	static BeamPositionTrackingClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace BeamPositionTracking_ns

#endif // _BEAMPOSITIONTRACKINGCLASS_H
